Imports System
Imports System.Data
Imports System.Xml
Imports System.Data.SqlClient

Public Class DBHelper
    'Update database helper class using more modern methods of DB connections
    'This class should be used now and not SQLHelper.vb. SQLHelper.vb remains in the
    'project for reference should any other methods need to be pulled to DBHelper and updated.

    'Get connection string
    Shared Function GetConnString() As String
        Return ConfigurationManager.ConnectionStrings("ConnectionString").ConnectionString
    End Function

    ' This method is used to attach array of SqlParameters to a SqlCommand.
    ' This method will assign a value of DbNull to any parameter with a direction of
    ' InputOutput and a value of null.  
    ' This behavior will prevent default values from being used, but
    ' this will be the less common case than an intended pure output parameter (derived as InputOutput)
    ' where the user provided no input value.
    ' Parameters:
    ' -command - The command to which the parameters will be added
    ' -commandParameters - an array of SqlParameters to be added to command
    Private Shared Sub AttachParameters(ByVal command As SqlCommand, ByVal commandParameters() As SqlParameter)
        If (command Is Nothing) Then Throw New ArgumentNullException("command")
        If (Not commandParameters Is Nothing) Then
            Dim p As SqlParameter
            For Each p In commandParameters
                If (Not p Is Nothing) Then
                    ' Check for derived output value with no value assigned
                    If (p.Direction = ParameterDirection.InputOutput OrElse p.Direction = ParameterDirection.Input) AndAlso p.Value Is Nothing Then
                        p.Value = DBNull.Value
                    End If
                    command.Parameters.Add(p)
                End If
            Next p
        End If
    End Sub ' AttachParameters


    ' Execute a SqlCommand (that returns a resultset and takes no parameters) against the database
    ' e.g.:  
    ' Dim dt As DataTable = DBHelper.ExecuteReader(CommandType.StoredProcedure, "GetOrders")
    ' Parameters:
    ' -commandType - the CommandType (stored procedure, text, etc.) 
    ' -commandText - the stored procedure name or T-SQL command 
    ' Returns: A DataTable containing the resultset generated by the command 
    Public Overloads Shared Function ExecuteReader(ByVal commandType As CommandType, _
                                                   ByVal commandText As String) As DataTable
        ' Pass through the call providing null for the set of SqlParameters
        Return ExecuteReader(commandType, commandText, CType(Nothing, SqlParameter()))
    End Function ' ExecuteReader

    ' Execute a SqlCommand (that returns a resultset) against the database, using the provided parameters.
    ' e.g.:  
    ' Dim dt As DataTable = DBHelper.ExecuteReader(CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24))
    ' Parameters:
    ' -commandType - the CommandType (stored procedure, text, etc.) 
    ' -commandText - the stored procedure name or T-SQL command 
    ' -commandParameters - an array of SqlParamters used to execute the command 
    ' Returns: A SqlDataReader containing the resultset generated by the command 
    Public Overloads Shared Function ExecuteReader(ByVal commandType As CommandType, _
                                                   ByVal commandText As String, _
                                                   ByVal ParamArray commandParameters() As SqlParameter) As DataTable

        'Set defaults if null passed
        If (commandText Is Nothing OrElse commandText.Length = 0) Then Throw New ArgumentNullException("commandText")
        If (IsNothing(commandType)) Then commandType = Data.CommandType.StoredProcedure

        Dim result As DataTable = New DataTable

        Using conn As SqlConnection = New SqlConnection(GetConnString())
            Using cmd As New SqlCommand(commandText, conn)
                Try
                    conn.Open()
                    With cmd
                        .Connection = conn
                        .CommandType = commandType
                        '.Parameters.AddRange(commandParameters)
                    End With

                    ' Attach the command parameters if they are provided
                    If Not (commandParameters Is Nothing) Then
                        AttachParameters(cmd, commandParameters)
                    End If

                    result.Load(cmd.ExecuteReader())

                Catch ex As Exception

                End Try
            End Using

            Return result
        End Using

    End Function ' ExecuteReader

    ' Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
    ' using the provided parameters.
    ' e.g.:  
    ' Dim orderCount As Integer = CInt(DBHelper.ExecuteScalar(CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24)))
    ' Parameters:
    ' -commandType - the CommandType (stored procedure, text, etc.) 
    ' -commandText - the stored procedure name or T-SQL command 
    ' -commandParameters - an array of SqlParamters used to execute the command 
    ' Returns: An object containing the value in the 1x1 resultset generated by the command 
    Public Overloads Shared Function ExecuteScalar(ByVal commandType As CommandType, _
                                                   ByVal commandText As String, _
                                                   ByVal ParamArray commandParameters() As SqlParameter) As Object

        'Set defaults if null passed
        If (commandText Is Nothing OrElse commandText.Length = 0) Then Throw New ArgumentNullException("commandText")
        If (IsNothing(commandType)) Then commandType = Data.CommandType.StoredProcedure

        Dim retvalue As Object

        Using conn As SqlConnection = New SqlConnection(GetConnString())
            Using cmd As New SqlCommand(commandText, conn)
                Try
                    conn.Open()
                    With cmd
                        .Connection = conn
                        .CommandType = commandType
                        '.Parameters.AddRange(commandParameters)
                    End With

                    ' Attach the command parameters if they are provided
                    If Not (commandParameters Is Nothing) Then
                        AttachParameters(cmd, commandParameters)
                    End If

                    retvalue = cmd.ExecuteScalar()
                    Return retvalue
                Catch ex As Exception

                End Try
            End Using
        End Using

    End Function ' ExecuteScalar

    ' Execute a SqlCommand (that returns no resultset) using the provided parameters.
    ' e.g.:  
    '  Dim result As Integer = DBHelper.ExecuteNonQuery(CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24))
    ' Parameters: 
    ' -commandType - the CommandType (stored procedure, text, etc.)
    ' -commandText - the stored procedure name or T-SQL command 
    ' -commandParameters - an array of SqlParamters used to execute the command 
    ' Returns: An Integer representing the number of rows affected by the command 
    Public Overloads Shared Function ExecuteNonQuery(ByVal commandType As CommandType, _
                                                     ByVal commandText As String, _
                                                     ByVal ParamArray commandParameters() As SqlParameter) As Integer

        'Set defaults if null passed
        If (commandText Is Nothing OrElse commandText.Length = 0) Then Throw New ArgumentNullException("commandText")
        If (IsNothing(commandType)) Then commandType = Data.CommandType.StoredProcedure

        Dim retvalue As Integer

        Using conn As SqlConnection = New SqlConnection(GetConnString())
            Using cmd As New SqlCommand(commandText, conn)
                Try
                    conn.Open()
                    With cmd
                        .Connection = conn
                        .CommandType = commandType
                        '.Parameters.AddRange(commandParameters)
                    End With

                    ' Attach the command parameters if they are provided
                    If Not (commandParameters Is Nothing) Then
                        AttachParameters(cmd, commandParameters)
                    End If

                    retvalue = cmd.ExecuteNonQuery()
                    Return retvalue

                Catch ex As Exception
                    Throw New Exception(ex.Message)
                End Try
            End Using
        End Using

    End Function ' ExecuteNonQuery

    ' Execute a SqlCommand (that returns a resultset) using the provided parameters.
    ' e.g.:  
    ' Dim ds As Dataset = DBHelper.ExecuteDataset(CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24))
    ' Parameters:
    ' -commandType - the CommandType (stored procedure, text, etc.)
    ' -commandText - the stored procedure name or T-SQL command
    ' -commandParameters - an array of SqlParamters used to execute the command
    ' Returns: A dataset containing the resultset generated by the command
    Public Overloads Shared Function ExecuteDataset(ByVal commandType As CommandType, _
                                                    ByVal commandText As String, _
                                                    ByVal ParamArray commandParameters() As SqlParameter) As DataSet

        'Set defaults if null passed
        If (commandText Is Nothing OrElse commandText.Length = 0) Then Throw New ArgumentNullException("commandText")
        If (IsNothing(commandType)) Then commandType = Data.CommandType.StoredProcedure

        Dim ds As New DataSet

        Using conn As SqlConnection = New SqlConnection(GetConnString())
            Using cmd As New SqlCommand(commandText, conn)
                Using dataAdapter As New SqlDataAdapter(cmd)
                    Try
                        conn.Open()
                        With cmd
                            .Connection = conn
                            .CommandType = commandType
                            '.Parameters.AddRange(commandParameters)
                        End With

                        ' Attach the command parameters if they are provided
                        If Not (commandParameters Is Nothing) Then
                            AttachParameters(cmd, commandParameters)
                        End If

                        'Dim dataAdapter As SqlDataAdapter
                        'dataAdapter = New SqlDataAdapter(cmd)

                        ' Fill the DataSet using default values for DataTable names, etc
                        dataAdapter.Fill(ds)

                    Catch ex As Exception
                        Throw ex
                    End Try
                End Using
            End Using
        End Using

        ' Return the dataset
        Return ds
    End Function ' ExecuteDataset
End Class